import {effectUtils, genericUtils, socketUtils} from '../../../utils.js';

async function use({workflow}) {
    let concentrationEffect = effectUtils.getConcentrationEffect(workflow.actor, workflow.item);
    let template = workflow.template;
    if (!template) {
        if (concentrationEffect) await genericUtils.remove(concentrationEffect);
        return;
    }
    await genericUtils.update(template, {
        flags: {
            'chris-premades': {
                template: {
                    name: workflow.item.name
                },
                castData: workflow.castData,
                macros: {
                    midi: {
                        actor: ['globeOfInvulnerabilityInvulnerable']
                    }
                }
            }
        }
    });
}
async function targeted({trigger: {token, castData}, workflow}) {
    if (workflow.item.type !== 'spell') return;
    let globeLevel = castData.castLevel;
    let spellLevel = workflow.spellLevel;
    if (spellLevel > (globeLevel - 1)) return;
    let newTargets = workflow.targets.difference(new Set([token]));
    await genericUtils.updateTargets(newTargets, socketUtils.firstOwner(workflow.actor));
    workflow.targets = newTargets;
}
export let globeOfInvulnerability = {
    name: 'Globe of Invulnerability',
    version: '1.1.0',
    midi: {
        item: [
            {
                pass: 'rollFinished',
                macro: use,
                priority: 50
            }
        ]
    }
};
export let globeOfInvulnerabilityInvulnerable = {
    name: 'Globe of Invulnerability: Invulnerable',
    version: globeOfInvulnerability.version,
    midi: {
        actor: [
            {
                pass: 'targetPreambleComplete',
                macro: targeted,
                priority: 25
            }
        ]
    }
};