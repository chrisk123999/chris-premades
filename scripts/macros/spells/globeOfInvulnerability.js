import {chris} from '../../helperFunctions.js';
import {queue} from '../../utility/queue.js';
async function target(workflow) {
    let baseLevel = workflow.castData?.baseLevel ?? workflow.item.flags?.['chris-premades']?.spell?.castData?.baseLevel;
    if (!workflow.targets.size || baseLevel === undefined) return;
    let queueSetup = await queue.setup(workflow.item.uuid, 'globeOfInvulnerability', 90);
    if (!queueSetup) return;
    let distanceMap = {};
    let ignoreTargets = Array.from(workflow.targets).filter(i => {
        let nearbyAllies = chris.findNearby(i, 10, 'all', false, true);
        let invulnerableAllies = nearbyAllies.filter(j => chris.getEffects(j.actor).find(k => k.flags['chris-premades']?.spell?.globeOfInvulnerability));
        let validEffects = invulnerableAllies.filter(l => {
            let effect = chris.getEffects(l.actor).find(m => m.flags['chris-premades']?.spell?.globeOfInvulnerability);
            if (!effect) return;
            let level = effect.flags['chris-premades'].spell.globeOfInvulnerability.castLevel;
            let distance = distanceMap?.[l.id];
            if (!distance) {
                distance = chris.getDistance(workflow.token, l);
                distanceMap[l.id] = distance;
            }
            if (distance <= 10) return;
            if (level > baseLevel) return true;
        });
        if (validEffects.length) return true;
    });
    if (!ignoreTargets.length) {
        queue.remove(workflow.item.uuid);
        return;
    }
    let newTargets = Array.from(workflow.targets).filter(i => !ignoreTargets.includes(i));
    chris.updateTargets(newTargets.map(j => j.id));
    workflow.targets = new Set(newTargets);
    queue.remove(workflow.item.uuid);
}
async function item({speaker, actor, token, character, item, args, scope, workflow}) {
    let effectData = {
        'name': workflow.item.name,
        'duration': {
            'seconds': 60
        },
        'icon': workflow.item.img,
        'flags': {
            'chris-premades': {
                'spell': {
                    'globeOfInvulnerability': {
                        'castLevel': workflow.castData.castLevel
                    }
                }
            }
        },
        'origin': workflow.item.uuid
    };
    await chris.createEffect(workflow.actor, effectData, workflow.item);
}
export let globeOfInvulnerability = {
    'target': target,
    'item': item
};